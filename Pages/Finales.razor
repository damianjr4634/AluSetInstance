@page "/finales/{acceso}"
@inherits _BasePage;
@inject DialogService DialogService
@using Data;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;


<PageTitle>Inscripcion de Finales</PageTitle>

<div class="row">
    <div class="col">
        <span >Desde</span>
        <RadzenDatePicker @bind-Value=@dde  ShowTime="false" HourFormat="12" DateFormat="dd/MM/yyyy"/>
        <span >Hasta</span>
        <RadzenDatePicker @bind-Value=@hta  ShowTime="false" HourFormat="12" DateFormat="dd/MM/yyyy"/>
    </div>
</div>
<div class="row mt-2">
    <div class="col">
        <span>Mesa</span>
        <RadzenNumeric @bind-Value=@mesa />
    </div>
</div>
<div class="row">
    <div class="col">
        <RadzenButton Style="margin:8px" Click=@(async () => await LoadInfo()) Icon="done" > Buscar </RadzenButton>    
    </div>
</div>
<h1>Inscripcion de Finales</h1>


        <RadzenDataGrid  Data="@_data" TItem="InscripcionesFinales" 
                       GridLines="Radzen.DataGridGridLines.Both" PageSize="50" AllowPaging="true"
                        FilterMode="FilterMode.Simple" AllowSorting="true" AllowFiltering="true" 
                       Style="heigth:420px">
            <Columns> 

             <RadzenDataGridColumn  Title="Documento" TItem="InscripcionesFinales" Property="AlumnoDocumento"  
                                       TextAlign="TextAlign.Start" Width="25px" Frozen="false">                    
                </RadzenDataGridColumn>      
                
                <RadzenDataGridColumn  Title="Nombre Apellido" TItem="InscripcionesFinales" Property="AlumnoNombre"  
                                       TextAlign="TextAlign.Start" Width="70px" Frozen="false">                    
                </RadzenDataGridColumn>      

                <RadzenDataGridColumn TItem="InscripcionesFinales" Title="Mesa" Property="Mesa" TextAlign="TextAlign.Start" Width="15px">                    
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="InscripcionesFinales" Title="Fecha Examen" Property="FechaExamen" 
                                      TextAlign="TextAlign.Start" Width="20px">    
                    <Template Context="data">             
                        @if (data.FechaExamen != null)  {
                            <div class="grid-column-data">
                                @data.FechaExamen.ToString("dd/MM/yyyy")
                            </div>
                        }
                    </Template>                
                </RadzenDataGridColumn>
    
               


                <RadzenDataGridColumn  Title="Carrera Id" TItem="InscripcionesFinales" Property="CarreraId"  
                                       TextAlign="TextAlign.Start" Width="25px">                    
                </RadzenDataGridColumn>       

                <RadzenDataGridColumn  Title="Carrera Descripcion" TItem="InscripcionesFinales" Property="CarreraNombre"  
                                       TextAlign="TextAlign.Start" Width="90px">                    
                </RadzenDataGridColumn>

                <RadzenDataGridColumn  Title="Materia" TItem="InscripcionesFinales" Property="MateriaNombre"  
                                       TextAlign="TextAlign.Start" Width="80px">                    
                </RadzenDataGridColumn>

                @if (acceso == "adm")
                {
                    <RadzenDataGridColumn  Title="AdmOk" TItem="InscripcionesFinales" Property="AdmOk"  
                                        TextAlign="TextAlign.Center" Width="20px"> 
                        <Template Context="data">
                            @if (data.PermisoId == null)
                            {              
                                @if (data.AdmOk == false)  {
                                    <div class="grid-column-data">
                                        <RadzenButton Click=@(async () => await OnClickAdm(@data, TypeCheck.AddCheck)) Icon="done" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                                    </div>
                                }
                                else
                                {
                                    <div class="grid-column-data">
                                        <RadzenButton Click=@(async () => await OnClickAdm(@data, TypeCheck.RemoveCheck)) Icon="highlight_off" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                                    </div>
                                }
                            }
                        </Template>                    
                    </RadzenDataGridColumn>
                }
                @if (acceso == "sec")
                {
                    <RadzenDataGridColumn  Title="AdmOk" TItem="InscripcionesFinales" Property="AdmOk"  
                                        TextAlign="TextAlign.Center" Width="25px"> 
                        <Template Context="data">
                            @if (data.PermisoId == null)
                            {              
                                @if (data.AdmOk == false)  {
                                    <div class="grid-column-data">
                                        <span style="color:red">No Aprobado</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="grid-column-data">
                                        <span style="color:green">Aprobado</span>
                                    </div>
                                }
                            }
                        </Template>                    
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn  Title="SecDocOk" TItem="InscripcionesFinales" Property="SecdocOk"  
                                        TextAlign="TextAlign.Center" Width="25px"> 
                        <Template Context="data">             
                            @if (data.PermisoId == null)
                            {
                                @if (data.SecdocOk == false)  {
                                    <div class="grid-column-data">
                                        <RadzenButton Click=@(async () => await OnClickSecDoc(@data, TypeCheck.AddCheck)) Icon="done" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                                    </div>
                                }
                                else
                                {
                                    <div class="grid-column-data">
                                        <RadzenButton Click=@(async () => await OnClickSecDoc(@data, TypeCheck.RemoveCheck)) Icon="highlight_off" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                                    </div>
                                }
                            }
                        </Template>                        
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn  Title="Plataforma" TItem="InscripcionesFinales" Property="PlataformaOk"  
                                        TextAlign="TextAlign.Center" Width="25px"> 
                        <Template Context="data">             
                            
                            @if (data.PlataformaOk == false)  {
                                <div class="grid-column-data">
                                    <RadzenButton Click=@(async () => await OnClickPlataforma(@data, TypeCheck.AddCheck)) Icon="done" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                                </div>
                            }
                            else
                            {
                                <div class="grid-column-data">
                                    <RadzenButton Click=@(async () => await OnClickPlataforma(@data, TypeCheck.RemoveCheck)) Icon="highlight_off" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                                </div>
                            }
                            
                        </Template>                       
                    </RadzenDataGridColumn>
                }
            </Columns>
        </RadzenDataGrid>


@code {
    [Parameter] public string acceso { get; set; }

    DateTime dde = DateTime.Now.AddDays(-30);
    DateTime hta = DateTime.Now;
    private List<InscripcionesFinales> _data = new();
    
    private int mesa = 0;

    enum TypeCheck {AddCheck, RemoveCheck};

    protected override async Task OnAfterRenderAsync(bool firstRender)        
    {
        
        if (firstRender)
        {    

            await LoadInfo();
            
        }
    }

    public async Task<ApplicationDbContext> DbContextCreate()
    {
        var dbContext = new ApplicationDbContext();
        dbContext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
        await dbContext.Database.OpenConnectionAsync();
        return dbContext;
    }

    private async Task LoadInfo()
    {
        string query = "";
        try
        {
            using (var dbContext = await DbContextCreate())
            {    
                _data = await dbContext.QueryAsync<InscripcionesFinales>($@"select ID, MESA, LLAMADO, ALUMNO_ID AS ALUMNOID, 
                                                                                    ALUMNO_DOCUMENTO AS ALUMNODOCUMENTO,  
                                                                                    ALUMNO_NOMBRE AS ALUMNONOMBRE, 
                                                                                    CUATRIMESTRE_TURNO_COMISION AS CUATRIMESTRETURNOCOMISION, 
                                                                                    CARRERA_ID AS CARRERAID, 
                                                                                    CARRERA_NOMBRE AS CARRERANOMBRE, MATERIA_ID AS  MATERIAID, 
                                                                                    MATERIA_NOMBRE AS MATERIANOMBRE, FECHA_EXAMEN AS FECHAEXAMEN, 
                                                                                    FECHA_EMISION AS FECHAEMISON, PERMISO_ID AS PERMISOID, ADM_OK AS ADMOK, 
                                                                                    SECDOC_OK AS SECDOCOK, PLATAFORMA_OK AS PLATAFORMAOK,
                                                                                    ALUMNO_MAIL AS ALUMNOMAIL
                                                                            from INSCRIPCION_FINALES_WEB 
                                                                            WHERE FECHA_EXAMEN BETWEEN '{dde.ToString("yyyy-MM-dd")}' AND '{hta.ToString("yyyy-MM-dd")}' and (MESA = {mesa} or {mesa} = 0)"
                                                                        );              
                                
                
            } 
            
            StateHasChanged();
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                toastService.ShowError(err.InnerException.Message);
            }
            else
            {
                toastService.ShowError(err.Message);
            }
        }
    }

    private async Task OnClickAdm(InscripcionesFinales data, TypeCheck tCheck)
    {
        try
        {
            using (var dbContext = await DbContextCreate())
            {    

                if (tCheck == TypeCheck.AddCheck)
                {
                    await CheckErrorsPermiso(dbContext, data);
                    await dbContext.ExecuteAsync(@$"update web_permexa set adm_ok=true where INDICE={data.Id}");              
                    
                    _data.Find(x => x.Id == data.Id)!.AdmOk = true;
                    if (_data.Find(x => x.Id == data.Id)!.SecdocOk && _data.Find(x => x.Id == data.Id)!.AdmOk)
                        await GrabarPermiso(dbContext, data.Id); 
                }
                else
                {
                    await dbContext.ExecuteAsync(@$"update web_permexa set adm_ok=false where INDICE={data.Id}");              
                    _data.Find(x => x.Id == data.Id)!.AdmOk = false;
                }                
                await CheckCreatePermiso(dbContext, data.Id);  
            } 
            
            //StateHasChanged();
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                await DialogService.Alert(err.InnerException.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
            else
            {
                await DialogService.Alert(err.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
        }
    }

    private async Task OnClickSecDoc(InscripcionesFinales data, TypeCheck tCheck)
    {
        try
        {
            using (var dbContext = await DbContextCreate())
            {    

                if (tCheck == TypeCheck.AddCheck)
                {
                    bool _chr = await CheckErrorsPermiso(dbContext, data);
                    if (_chr) 
                    {
                        await dbContext.ExecuteAsync(@$"update web_permexa set secdoc_ok=true where INDICE={data.Id}");                     
                        
                        _data.Find(x => x.Id == data.Id)!.SecdocOk = true; 
                        if (_data.Find(x => x.Id == data.Id)!.SecdocOk && _data.Find(x => x.Id == data.Id)!.AdmOk)
                            await GrabarPermiso(dbContext, data.Id);
                    }           
                }
                else
                {
                    await dbContext.ExecuteAsync(@$"update web_permexa set secdoc_ok=false where INDICE={data.Id}");              
                    _data.Find(x => x.Id == data.Id)!.SecdocOk = false;
                }
                await CheckCreatePermiso(dbContext, data.Id);
            } 
             
            //StateHasChanged();
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                await DialogService.Alert(err.InnerException.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
            else
            {
                await DialogService.Alert(err.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
        }
    }

    private async Task OnClickPlataforma(InscripcionesFinales data, TypeCheck tCheck)
    {
        try
        {
            using (var dbContext = await DbContextCreate())
            {    

                if (tCheck == TypeCheck.AddCheck)
                {
                    
                    bool _chr = await CheckErrorsPermiso(dbContext, data);
                    if (_chr) 
                    {
                        await dbContext.ExecuteAsync(@$"update web_permexa set plataforma_ok=true where INDICE={data.Id}");              
                        _data.Find(x => x.Id == data.Id)!.PlataformaOk = true;
                    }
                }
                else
                {
                    await dbContext.ExecuteAsync(@$"update web_permexa set plataforma_ok=false where INDICE={data.Id}");              
                    _data.Find(x => x.Id == data.Id)!.PlataformaOk = false;
                }
                
                
            } 
            
            //StateHasChanged();
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                await DialogService.Alert(err.InnerException.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
            else
            {
                await DialogService.Alert(err.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
        }
    }

    private async Task<bool> CheckErrorsPermiso(ApplicationDbContext dbContext, InscripcionesFinales data)
    {
        CheckErrores? _errors = await dbContext.QuerySingleOrDefaultAsync<CheckErrores>($@"SELECT FERRCOD, FERRWEB AS FERRMSG
                                                                                                    FROM WEB_PERMEXA W
                                                                                                    LEFT OUTER JOIN ALUMNOS A ON A.INDICE=W.ALUMNO_ID
                                                                                                    LEFT OUTER JOIN XXX_MATERIAS_FINALES(A.cod_alu,W.CARRE) X ON X.CODMAT=W.COD_MAT
                                                                                                    where W.INDICE={data.Id}");
        
        bool _ret = true;
        if (_errors != null)
        {
            if (_errors.Ferrcod != null && _errors.Ferrcod == 2) 
            {
                _ret = false;
                if (acceso == "adm")
                {
                    throw new Exception(_errors.Ferrmsg);
                }
                else
                {
                    var resp = await DialogService.Confirm($@"Problema: {_errors.Ferrmsg}. 
                                                              Desea enviarle mail al alumno con este problema?", "Problemas en inscripción", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });
                    if (resp == true)
                    {
                        string _fecha = data.FechaExamen.ToString("dd/MM/yyyy");
                        string _msg = 
$@"Estimado {data.AlumnoNombre} 
                
Nos comunicamos para informale que hubo un inconveniente en la inscripción al final 
de la materia <b>{data.MateriaNombre}</b> con fecha el <b>{_fecha}</b>.
                                         
La misma no podrá ser rendida por el siguiente problema:

<span style=""color: red; font-size:12"">{_errors.Ferrmsg}</span>

Ante cualquier duda o inconveniente estamos a disposición.

Atte Secretaria Docente.";
                        await DialogService.OpenAsync<SendMailDialog>($"Envio Mail ",
                                                                        new Dictionary<string, object>() { 
                                                                            { "Destino", data.AlumnoMail ?? string.Empty },
                                                                            { "Copia", "" },
                                                                            { "Asunto", "Problemas en permiso de examen" }, 
                                                                            { "Mensaje", _msg },
                                                                        },
                                                                        new DialogOptions() { 
                                                                            Width = "700px", 
                                                                            Height = "650px", 
                                                                            Resizable = true, 
                                                                            Draggable = true 
                                                                        });
                    }
                }
            }
        }
        return _ret;
    }

    private async Task GrabarPermiso(ApplicationDbContext dbContext, int Id)
    {
        await dbContext.QueryAsync($@" insert into PERMEXA ( MESA, COD_ALU, APELLIDO, CUTUCO, CARRE, COD_MAT, FECH_EMI, NREG, USUARIO, ULTMOD)
                                        select w.mesa, a.cod_alu, a.apellido, w.cutuco, w.carre, w.cod_mat, w.fech_emi,0,-1,current_timestamp
                                        from web_permexa w
                                        left outer join alumnos a on a.indice=w.alumno_id
                                        where w.INDICE={Id.ToString()}");
        
    }

    private async Task CheckCreatePermiso(ApplicationDbContext dbContext, int Id)
    {
        InscripcionesFinales _final = _data.Find( x => x.Id == Id)!;
        if (_final.AdmOk && _final.SecdocOk) 
        {
            _final.PermisoId = 0;

        }
    }
}
