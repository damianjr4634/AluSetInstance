@page "/invitaciones"
@inherits _BasePage;
@inject DialogService DialogService
@inject IConfiguration _configuration;
@inject SmtpEmailSender _emailSender
@using Data;
@using AluSetInstance.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;


<PageTitle>Invitaciones al Sistema de Alumnos</PageTitle>

<div class="row">
    <div class="col">
        <span>Codigo Carrera</span>
        <RadzenDropDown AllowFiltering="true" AllowClear="false" TValue="string" style="width:500px; margin-top: 2px"
                                        Data=@Carreras TextProperty="Nombre" ValueProperty="Id" @bind-Value=carrera />
        <span>Cuatrimestre</span>
        <RadzenTextBox @bind-Value=@cuatrim />
        <span>Curso</span>
        <RadzenTextBox @bind-Value=@curso />
    </div>
</div>
<div class="row">
    <div class="col">
        <RadzenButton Style="margin:8px" Click=@(async () => await LoadInfo()) Icon="done" > Buscar </RadzenButton>    
    </div>
</div>
<div class="row">
    <div class="hstack">
        <h1>Invitaciones al Sistema de alumnos</h1>
        <RadzenButton class="ms-auto" Disabled="@(_data.Count == 0)" Click=@(async () => await InvitarTodos()) Icon="done" > Invitar a todos </RadzenButton>
    </div>
</div>

        <RadzenDataGrid  Data="@_data" TItem="Alumnos" 
                       GridLines="Radzen.DataGridGridLines.Both" PageSize="50" AllowPaging="true"
                        FilterMode="FilterMode.Simple" AllowSorting="true" AllowFiltering="true" 
                       Style="heigth:420px">
            <Columns> 

                <RadzenDataGridColumn  Title="Documento" TItem="Alumnos" Property="AlumnoId"  
                                       TextAlign="TextAlign.Start" Width="20px" Frozen="false">                    
                </RadzenDataGridColumn>      
                
                <RadzenDataGridColumn  Title="Apellido" TItem="Alumnos" Property="AlumnoApellido"  
                                       TextAlign="TextAlign.Start" Width="45px" Frozen="false">                    
                </RadzenDataGridColumn>  
                <RadzenDataGridColumn  Title="Nombre" TItem="Alumnos" Property="AlumnoNombre"  
                                       TextAlign="TextAlign.Start" Width="45px" Frozen="false">                    
                </RadzenDataGridColumn>              


                <RadzenDataGridColumn  Title="Mail" TItem="Alumnos" Property="AlumnoMail"  
                                       TextAlign="TextAlign.Start" Width="45px">                    
                </RadzenDataGridColumn>       

                <RadzenDataGridColumn  Title="Carrera Descripcion" TItem="Alumnos" Property="CarreraNombre"  
                                       TextAlign="TextAlign.Start" Width="80px">                    
                </RadzenDataGridColumn>

                <RadzenDataGridColumn  Title="Usuario" TItem="Alumnos" Property="HaveUser"  
                                       TextAlign="TextAlign.Center" Width="20px"> 
                    <Template Context="data">             
                        @if (!data.HaveUser)
                        {
                            <div class="grid-column-data">
                                <RadzenButton Text="Crear" Click=@(async () => await OnClickInvitacion(@data)) Icon="done" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                            </div>                           
                        }
                        else
                        {
                            <span> Tiene Usuario </span>
                        }  
                    </Template>                        
                </RadzenDataGridColumn>
                <RadzenDataGridColumn  Title="Mail" TItem="Alumnos" Property="HaveUser"  
                                       TextAlign="TextAlign.Center" Width="20px"> 
                    <Template Context="data">             
                        
                        <div class="grid-column-data">
                            <RadzenButton Text="Enviar" Click=@(async () => await OnClickEnviarMail(@data)) Icon="done" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-8"/>    
                        </div>                           
                        
                    </Template>                        
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>


@code {

    string carrera = String.Empty;
    string cuatrim = String.Empty;
    string curso = String.Empty;

    private List<Alumnos> _data = new();
    private List<Carrera> Carreras = new();

    
    enum TypeCheck {AddCheck, RemoveCheck};
    
    //private UserManager<ApplicationUser> _userManager;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            using (var dbContext = await DbContextCreate())
            {    
                Carreras = await dbContext.QueryAsync<Carrera>($@"select ca.descarre as Nombre,
                                                                          CA.CARRE AS Id
                                                                  from carrera ca "
                                                                        );              
                                
                
            } 
            
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                toastService.ShowError(err.InnerException.Message);
            }
            else
            {
                toastService.ShowError(err.Message);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)        
    {
        
        if (firstRender)
        {    

            
        }
    }

    public async Task<ApplicationDbContext> DbContextCreate()
    {
        var dbContext = new ApplicationDbContext();
        dbContext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
        await dbContext.Database.OpenConnectionAsync();
        return dbContext;
    }

    private async Task LoadInfo()
    {
        string query = "";
        try
        {
            using (var dbContext = await DbContextCreate())
            {    
                _data = await dbContext.QueryAsync<Alumnos>($@"select distinct a.indice as Id,
                                                                                        a.cod_alu as ALUMNOID,
                                                                                        SUBSTRING(A.COD_ALU FROM 4) AS ALUMNODOCUMENTO,
                                                                                        TRIM(a.apellido) AS ALUMNOAPELLIDO ,
                                                                                        TRIM(a.nom_ape) AS ALUMNONOMBRE,
                                                                                        a.mail AS ALUMNOMAIL,
                                                                                        ca.descarre as CARRERANOMBRE,
                                                                                        CA.CARRE AS CARRERAID,
                                                                                        case when exists(select 1 from ""AspNetUsers"" us where us.""UserName""=lower(a.mail) ) then true else false end as HAVEUSER
                                                                        from cursada c
                                                                        left outer join alumnos a on a.cod_alu=c.cod_alu and a.carre=c.carre
                                                                        LEFT OUTER join carrera ca on ca.carre=a.carre
                                                                        where c.carre = '{carrera.ToUpper()}' and c.cua_anio='{cuatrim}'  and c.cutuco='{curso}' and coalesce(a.mail,'')<>''"
                                                                        );              
                                
                
            } 
            
            StateHasChanged();
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                toastService.ShowError(err.InnerException.Message);
            }
            else
            {
                toastService.ShowError(err.Message);
            }
        }
    }

    private async Task OnClickInvitacion(Alumnos data, bool showDg = true)
    {
        try
        {

            using (var dbContext = await DbContextCreate())
            {   
                var _userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(dbContext),
                    null,
                    new PasswordHasher<ApplicationUser>(),
                    null,
                    null,
                    new UpperInvariantLookupNormalizer(),
                    new IdentityErrorDescriber(),
                    null,
                    null); 
//A41623833_20051
                var user = new ApplicationUser { UserName = data.AlumnoMail, 
                                                Email = data.AlumnoMail, 
                                                AccountType = "A", 
                                                LastName = data.AlumnoApellido, 
                                                Name= data.AlumnoNombre, 
                                                Document =  data.AlumnoDocumento,
                                                EmailConfirmed = true};

                var result = await _userManager.CreateAsync(user, $"A{data.AlumnoDocumento}_{data.Id.ToString()}");
                if (result.Succeeded)
                {
                    await dbContext.QueryAsync($"update alumnos set fusuweb='S' where indice={data.Id.ToString()}");
                    if (showDg)
                    {
                        await DialogService.Alert("Usuario creado", "", new AlertOptions() { OkButtonText = "ok" });
                    }
                    _data!.Find(x => x.Id == data.Id).HaveUser = true;
                    await OnClickEnviarMail(data, showDg);
                }
               
            } 
             
            //StateHasChanged();
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                await DialogService.Alert(err.InnerException.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
            else
            {
                await DialogService.Alert(err.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
        }
    }

    private async Task OnClickEnviarMail(Alumnos data,  bool showDg = true)
    {
        try
        {
            var _pass = $"A{data.AlumnoDocumento}_{data.Id.ToString()}";

            await _emailSender.SendEmailAsync(data.AlumnoMail,
            "Sistema Alumnos ESBA Barrio Norte", 
            $@"Estimados alumnos, <br>
                Les damos la bienvenida al portal de autogestión de ESBA BARRIO NORTE. El mismo les permitirá visualizar su situación académica, inscribirse a los finales y reinscribirse a los próximos cuatrimestres.
                <br>
                El sitio es:  https://esbaintranet.freeddns.org/ 
                <br>
                Su nombre de usuario es: {data.AlumnoMail} 
                <br>
                Su contraseña es: {_pass}
                <br>
                <br>
                La contraseña podrá ser modifica según los parámetros establecidos desde su perfil.
                <br>    
                <br>
                Saludos cordiales,
                <br>
                Equipo Directivo.");

                if (showDg)
                {
                    await DialogService.Alert("Mail enviado", "", new AlertOptions() { OkButtonText = "ok" });
                }
            
        }
        catch (Exception err)
        {
            if (err.InnerException != null && err.InnerException.Message != "")
            {
                await DialogService.Alert(err.InnerException.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
            else
            {
                await DialogService.Alert(err.Message, "Error", new AlertOptions() { OkButtonText = "ok" });
                
            }
        }
    }

    private async Task InvitarTodos()
    {
        var resp = await DialogService.Confirm("Invita a todos los usuario que visualiza?", "Invitaciones", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });
        if (resp == true)
        {
            InvokeAsync(async () =>
                {
                        await Task.Run(async () => 
                        { foreach(var item in _data)
                            {
                                if (item.HaveUser == false )
                                {
                                    await OnClickInvitacion(item,false);
                                }  
                            }
                        });
                        DialogService.Close();               
            });
            await BusyDialog("Espere ...");
            
        }
    }

    // Busy dialog from string
    async Task BusyDialog(string message)
    {
         await DialogService.OpenAsync("", ds =>
        @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
            <RadzenImage Path="images/wait.webp" Style="width: 200px;" />
            <RadzenText TextStyle="TextStyle.H6">Creando usuarios y enviando correos. Espere</RadzenText>
        </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    
    }
}
